App.js-
// import logo from './logo.svg';
import './App.css';
import Home from "./Home";
import Create from "./Create";
import NavBar from "./NavBar";
import Update from "./Update";
import Login from "./Login";
import {BrowserRouter,Routes,Route} from "react-router-dom"
import SignUp from './SignUp';
import MaybeShowNavBar from './MaybeShowNavBar';

function App() {
  return (
    <div className="App">
      <BrowserRouter>
        <MaybeShowNavBar>
          <NavBar/>
        </MaybeShowNavBar>
        <Routes>
          <Route path="/" element={<Login/>}></Route>
          <Route path="/home" element={<Home/>}></Route>
          <Route path="/create" element={<Create/>}></Route>
          <Route path="/update/:rno" element={<Update/>} />
          <Route path="/signup" element={<SignUp/>}></Route>

          <Route path="*" element={<Login/>}></Route>
        </Routes>
      </BrowserRouter>
    </div>
  );
}

export default App;

Create.js-

import {useState, useRef} from "react";
import axios from "axios";
import { getAuth, signOut } from 'firebase/auth';
import { Link, useNavigate } from 'react-router-dom';

export default function Create(){
    const rName = useRef();
    const[rno,setRno] = useState("");
    const[name,setName] = useState("");
    const[marks, setMarks] = useState("");
    const navigate = useNavigate();

    const hRno = (event) => {setRno(event.target.value);}
    const hName = (event) => {setName(event.target.value);}
    const hMarks = (event) => {setMarks(event.target.value);}

    const save = (event) => {
        event.preventDefault();
        let urladd = "http://localhost:9999/create";
        let data = {rno,name,marks};
        axios.post(urladd,data)
        .then(res=>{
            if(res.data.insertedId){
                alert("record created");
                setRno("");
                setName("");
                setMarks("");
                rName.current.focus();
            }
            else{
                alert("record already exists");
                setRno("");
                setName("");
                setMarks("");
                rName.current.focus();
            }
        })
        .catch(err=>{
            if(err.code=="ERR_NETWORK"){
                alert("pls try after sometime");
                setRno("");
                setName("");
                setMarks("");
                rName.current.focus();
            }
        })
    }
    const handleSignOut = () => {
        const auth = getAuth();
        signOut(auth)
          .then(() => {
            // Sign out successful
            navigate('/'); // Redirect to login page after sign out
          })
          .catch((error) => {
            console.log('Error signing out:', error);
          });
    };
    return(
        <>
        <center>
            <h1>Create Page</h1>
            <form onSubmit={save}>
                <input type= "number" placeholder="enter rno" onChange={hRno} value={rno} ref={rName}/>
                <br></br>
                
                <input type= "text" placeholder="enter name" onChange={hName} value={name}/>
                <br></br>

                <input type= "number" placeholder="enter marks" onChange={hMarks} value={marks}/>
                <br></br>
                <input type="submit"/>
                <button type='button' onClick={handleSignOut}>
                    Sign out
                </button>
            </form>
        </center>
        </>
    );
    
}

Update.js-

import { useState, useEffect } from "react";
import axios from "axios";
import { useParams, useNavigate } from "react-router-dom";

export default function UpdatePage() {
  const navigate = useNavigate();
  const { rno } = useParams();
  const [name, setName] = useState("");
  const [marks, setMarks] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(`http://localhost:9999/read/${rno}`);
        const { name, marks } = response.data;
        setName(name);
        setMarks(marks);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, [rno]);

  const handleUpdate = async () => {
    try {
      const response = await axios.put(`http://localhost:9999/update`, {
        rno,
        name,
        marks,
      });
      console.log(response.data);
      alert("Record updated successfully");
      navigate("/home");
    } catch (error) {
      console.error(error);
    }
  };

  const handleCancel = () => {
    navigate("/home");
  };

  return (
    <>
      <h1>Update Page</h1>
      <form>
        <div>
          <label>Name:</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
        </div>
        <div>
          <label>Marks:</label>
          <input
            type="text"
            value={marks}
            onChange={(e) => setMarks(e.target.value)}
          />
        </div>
        <div>
          <button type="button" onClick={handleUpdate}>
            Update
          </button>
          <button type="button" onClick={handleCancel}>
            Cancel
          </button>
        </div>
      </form>
    </>
  );
}

NavBar.js-

import {Link} from "react-router-dom";

export default function NavBar(){
    return(
        <>
        <center>
            <div className="nav">
                <Link to="/home">Home</Link>
                <Link to="/create">Create</Link>
            </div>
        </center>
        </>
    );
}

firebase.js-

import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import 'firebase/database'
import {getDatabase} from 'firebase/database';

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDVNPZBwgpooZ-kuQ0klx7H7WUO-s2nIFs",
  authDomain: "stm-app-42e66.firebaseapp.com",
  databaseURL: 'https://stm-app-42e66-default-rtdb.firebaseio.com',
  projectId: "stm-app-42e66",
  storageBucket: "stm-app-42e66.appspot.com",
  messagingSenderId: "500455605579",
  appId: "1:500455605579:web:06d77055dcbfb19d7754ce"
};

// Initialize Firebase
// const app = initializeApp(firebaseConfig);
const app = initializeApp(firebaseConfig);
export const auth = getAuth();
export const dataabse = getDatabase(app);

Home.js-

import { useState, useEffect } from "react";
import axios from "axios";
import { getAuth, signOut } from 'firebase/auth';
import { Link, useNavigate } from 'react-router-dom';

export default function Home({ handleLogout }) {
  const navigate = useNavigate();
  const [info, setInfo] = useState([]);

  useEffect(() => {
    let urladd = "http://localhost:9999/read";
    axios.get(urladd)
      .then(res => {
        setInfo(res.data);
        console.log(res.data);
      })
      .catch(err => console.log(err));
  }, []);

  const deleteStudent = (rno) => {
    let urladd = "http://localhost:9999/remove";
    axios.delete(urladd, { data: { rno } })
      .then(res => {
        alert("record deleted");
        window.location.reload();
      })
      .catch(err => console.log(err));
  };

  const handleSignOut = () => {
    const auth = getAuth();
    signOut(auth)
      .then(() => {
        // Sign out successful
        // handleLogout(); 
        navigate('/'); // Redirect to login page after sign out
      })
      .catch((error) => {
        console.log('Error signing out:', error);
      });
  };

  const handleUpdate = (rno) => {
    navigate(`/update/${rno}`); // Redirect to update page with rno as a parameter
  };

  return (
    <>
      <center>
        <h1>Home Page</h1>
        <table border="4" style={{ "width": "70%" }}>
          <tr>
            <th>Rno</th>
            <th>Name</th>
            <th>Marks</th>
            <th>Update</th> {/* Add a new column for the Update button */}
            <th>Delete</th>
          </tr>
          {info.map((e) => (
            <tr style={{ "textAlign": "center" }} key={e._id}>
              <td>{e._id}</td>
              <td>{e.name}</td>
              <td>{e.marks}</td>
              <td>
                <button onClick={() => handleUpdate(e._id)}>Update</button>
              </td>
              <td>
                <button onClick={() => { if (window.confirm('Are you sure?')) deleteStudent(e._id) }}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </table>
        <button type='button' onClick={handleSignOut}>
          Sign out
        </button>
      </center>
    </>
  );
}

Login.js-

import React, { useState } from 'react';
import { Navigate, useNavigate } from 'react-router-dom';
import { Link } from 'react-router-dom';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from './firebase';
import NavBar from './NavBar';
import './Login.css';
const Login = ({ onLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleadmin = (e) =>{
    if (!email || !password) {
      setError('Please enter email and password');
    }else if(email === 'admin@eg2.dev' && password === '123456'){
      navigate('/home')
    }else{
      setError('Wrong credentials');
    }
  }

  const handleLogin = (e) => {
    e.preventDefault();

    if (!email || !password) {
      setError('Please enter email and password');
    } else {
      signInWithEmailAndPassword(auth, email, password)
        .then((userCredential) => {
          // Signed in
          const user = userCredential.user;
          // onLogin(); // Call the onLogin function from App.js to update the isLoggedIn state
          navigate('/home'); // Redirect to home page after successful login
        })
        .catch((error) => {
          setError('Wrong credentials');
        });
    }
  };

  return (
    <div className='container'>
      <h2>Feedback Application</h2>
      <form>
        <div className='email'>
          <label>Email:</label>
          <input
            type='email'
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </div>
        <div className='password'>
          <label>Password:</label>
          <input
            type='password'
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        {error && <p className='error'>{error}</p>}
        <div className='buttons'>
          <button type='submit' onClick={handleLogin}>Login</button>
          <button type='button' onClick={handleadmin}>Admin Login</button>
          <button type='signup'>
            <Link to='/signup'>SignUp</Link>
          </button>
        </div>
      </form>
    </div>
  );
};

export default Login;

SignUp.js-

import React, { useState } from 'react';
// import './SignUp.css';
import { useNavigate } from 'react-router-dom';
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { auth } from './firebase';
const SignUp = () => {
  const navigate = useNavigate(); // Create a navigate function using useNavigate

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    // Perform validation
    if (!name || !email || !password || !confirmPassword) {
      setError('Please fill in all fields');
    } else if (password !== confirmPassword) {
      setError('Passwords do not match');
    } else {
        createUserWithEmailAndPassword(auth, email, password)
        .then((userCredential) => {
          // Signup successful
          console.log('Signup successful:', userCredential.user);
          // You can perform additional actions after signup, such as redirecting the user to a different page
        })
        .catch((error) => {
          setError(error.message);
        });
        navigate('/');
    }
  };

  return (
    <div className="container">
      <h2>Sign Up</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Name:</label>
          <input
            type="text"
            required
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
        </div>
        <div>
          <label>Email:</label>
          <input
            type="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </div>
        <div>
          <label>Password:</label>
          <input
            type="password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        <div>
          <label>Confirm Password:</label>
          <input
            type="password"
            required
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
          />
        </div>
        {error && <p className="error">{error}</p>}
        <div>
          <button type="submit">Sign Up</button>
        </div>
      </form>
    </div>
  );
};

export default SignUp;

Server side (mongodb)
s1.js-
const express = require("express");
const cors = require("cors");
const {MongoClient} = require("mongodb");

const app = express();
app.use(cors());
app.use(express.json());

app.post("/create",(req,res)=>{
    const url = "mongodb://0.0.0.0:27017";
    MongoClient.connect(url,(err,database)=>{
        if(err){
            console.log(err);
            res.send(err);
        }
        else{
            const dbo = database.db("sms30july23");
            const data = {"_id" : req.body.rno,"name":req.body.name,"marks":req.body.marks};
            dbo.collection("student").insertOne(data,(err,result)=>{
                if(err){
                    console.log(err);
                    res.send(err);
                }
                else{
                    console.log(result);
                    res.send(result);
                }
            })
        }
    })
});

app.get("/read",(req,res)=>{
    const url = "mongodb://0.0.0.0:27017";
    MongoClient.connect(url,(err,database)=>{
        if(err){
            console.log(err);
            res.send(err);
        }
        else{
            const dbo = database.db("sms30july23");
            dbo.collection("student").find({}).toArray((err,result)=>{
                if(err){
                    res.send(err);
                }
                else{
                    res.send(result);
                }
            })
        }
    })
});

app.delete("/remove",(req,res)=>{
    const url = "mongodb://0.0.0.0:27017";
    MongoClient.connect(url,(err,database)=>{
        if(err){
            console.log(err);
            res.send(err);
        }
        else{
            const dbo = database.db("sms30july23");
            const data = {"_id":req.body.rno};
            dbo.collection("student").deleteOne(data,(err,result)=>{
                if(err){
                    res.send(err);
                }
                else{
                    res.send(result);
                }
            })
        }
    })
});

app.put("/update", (req, res) => {
    const url = "mongodb://0.0.0.0:27017";
    MongoClient.connect(url, (err, database) => {
      if (err) {
        console.log(err);
        res.send(err);
      } else {
        const dbo = database.db("sms30july23");
        const query = { _id: req.body.rno };
        const updateData = {
          $set: { name: req.body.name, marks: req.body.marks },
        };
        dbo.collection("student").updateOne(query, updateData, (err, result) => {
          if (err) {
            console.log(err);
            res.send(err);
          } else {
            console.log(result);
            res.send(result);
          }
        });
      }
    });
  });
  

app.listen(9999,()=>{console.log("server ready @ 9999");});